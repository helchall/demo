security:
    encoders:
        App\Entity\User: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #users_in_memory: { memory: null }
        database_users:
            entity: { class: App\Entity\User, property: username }
        api_token:
            entity: { class: App\Entity\User, property: apiToken }
        web_service_user_provider:
            id:
                web_service_user_provider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_token:
            pattern: ^/api_token/
            provider: api_token
            guard:
                authenticators:
                    - App\Security\ApiTokenAuthenticator
        secured_area:
            pattern: ^/api_react
            stateless: true
            simple_preauth:
                authenticator: jwt_auth.jwt_authenticator
            provider: web_service_user_provider
        main:
            anonymous: lazy
            provider: database_users
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator

            # guard:
            #     authenticators:
            #         - App\Security\LoginFormAuthenticator
            #         - App\Security\ApiTokenAuthenticator
            #     entry_point: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/forget_pass, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/list_articles, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/articles, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/authors, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api_react/public, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api_react/private, roles: ROLE_OAUTH_AUTHENTICATED }
         - { path: ^/, roles: ROLE_USER }
         - { path: '^/api', roles: ROLE_USER }
         - { path: '^/api_token', roles: ROLE_USER }
         #- { path: ^/profile, roles: ROLE_USER }
